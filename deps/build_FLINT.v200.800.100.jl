using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libflint"], :libflint),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/FLINT_jll.jl/releases/download/FLINT-v200.800.100+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/FLINT.v200.800.100.aarch64-linux-gnu.tar.gz", "70a02208095688a9ab06767a18f508129d5d1815e8fa348099d6f8385791b087"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/FLINT.v200.800.100.aarch64-linux-musl.tar.gz", "b9782c2ee9ae573bfec04fa279a6f44e908754183fe6cff1bf6ee1dd726fc066"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/FLINT.v200.800.100.armv7l-linux-gnueabihf.tar.gz", "05181dfa82a9982d444a59f1677ce75618c263088937299f15dbbea3d0b494e9"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/FLINT.v200.800.100.armv7l-linux-musleabihf.tar.gz", "e36af789921bf2e85faca14badedf2fc542f3da04896fc2295aa56929f9a5d8c"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/FLINT.v200.800.100.i686-linux-gnu.tar.gz", "91f0e689f6474c00e232b00689b62916a4a2684742a84d0907c13f5233c25b8c"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/FLINT.v200.800.100.i686-linux-musl.tar.gz", "8721168780bdca81a5e42366b02c179b1f227c06c62f745fe21a853bd7a8d5ae"),
    Windows(:i686) => ("$bin_prefix/FLINT.v200.800.100.i686-w64-mingw32.tar.gz", "5bfce2b79fc7943ce35b5f9e5981d8900ffc96a3805fa8da14f5c290bc0117d6"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/FLINT.v200.800.100.powerpc64le-linux-gnu.tar.gz", "1d0aaa75d0d1494824f2e6ec9388e990fb512b7b70aa0103afefea824397a944"),
    MacOS(:x86_64) => ("$bin_prefix/FLINT.v200.800.100.x86_64-apple-darwin.tar.gz", "11a213f3c57b06b44c788516b2d73935e082dcf8c0e025d6ad4c0988ec95dd46"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/FLINT.v200.800.100.x86_64-linux-gnu.tar.gz", "72fe5f6310c71fcb41c1b917f9d03051707abc590c9675b284eb2293f5a4004a"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/FLINT.v200.800.100.x86_64-linux-musl.tar.gz", "27da8fe793114ff0c77185dc9a71b301e00554f78935c8f701217f96ddc36963"),
    FreeBSD(:x86_64) => ("$bin_prefix/FLINT.v200.800.100.x86_64-unknown-freebsd.tar.gz", "6557ca99a2d2a3588dfaa0bffb3af3734cc299e73fe0ac6200b75b50b8a2c48c"),
    Windows(:x86_64) => ("$bin_prefix/FLINT.v200.800.100.x86_64-w64-mingw32.tar.gz", "71d6360c292b80a127b3e88bf7644d08ad0a5bb0f2a39b8e37c07c444d1000e8"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
